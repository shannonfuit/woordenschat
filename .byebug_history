continue
given_answer
given_answer == question.anscorrect
question.anscorrect
self.given_answer
self.given_answer = given_answer.to_i
given_answer
continue
question.anscorrect
given_answer == question.anscorrect
given_answer
continue
level_1.questions.last
level_1.questions
level_1
leve1_1.questions.last
level_1
level_11
continue
level1.questions
continue
Question.where('id > ? AND level_id = ?', id, level_id).first
self
continue
level.questions
continue
level.questions
questionst.each {|q|  q.update_attributes(level: level) }
whereami
questionst
questionst = [questions(:one), questions(:two)]
questions
questions(:one)
questions
level.questions
continue
level.questions
continue
question_1 = level.questions = questions(:one)
continue
 level.questions.create questions(:one).to_h
 level.questions.create questions(:one)
question = questions(:one)
q
q = questions(:one)
continue
user.answers.all.collect(&:correct_answered?).length
number_correct = user.answers.all.sum
number_correct = user.answers.all.sum(&:correct_answered)
continue
!user.has_won(self)
played_level.level.number == level_number
played_level.finishlevel < played_level.level.closingdate
played_level.finishlevel
continue
Medal.count
continue
self.playedlevel = played_level
 self.given_answer = given_answer
continue
self.playedlevel
self.played_level
self.playedlevel = played_level
self.playedlevel
self.played_level
self
@playedlevel = played_level
self
continue
self
continue
self
@playedlevel = played_level
Answer.last
@playedlevel = played_level
self
self.playedlevel = played_level
self.played_level = played_level
self
played_level
continue
Answer.last
Answer.first
answer.first
current_playedlevel
current_playedlevel.answers
current_playedlevel
continue
@next
continue
@answer.submit(params[:answer], current_playedlevel )
params[:answer] @answer.submit(params[:answer], current_playedlevel )
@answer.question
params[:answer]
params[:given_answer]
params
@answer.question
@answer
continue
params
continue
params
continue
params
continue
params
current_playedlevel
continue
params
continue
params
continue
Medal.count - user.medals.count
Medal.count
continue
puts Medal.all.inspect
Medal.count
exit
Medal.count
Medal.all
exit
Medal.destroy_all
puts Medal.all
pp Medal.all
Medal.count
exit
Medal.count
continue
Medal.count
continue
user
continue
user.achievements
user.medals
user
Achievements
user.medals
continue
Achievements.all
user.achievements
user.medals
user
continue
exit
user
self
